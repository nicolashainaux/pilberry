#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Pilberry runs a car radio based on Raspberry Pi
# Copyright 2014 Olivier Cecillon <ocecillon@users.sourceforge.net>
# and Nicolas Hainaux <nico_h@users.sourceforge.net>

# This file is part of Pilberry. It has been inspired by Bob Rathbone's
# PiRadio project's test_rotary_class.py file.

# Pilberry is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# any later version.

# Pilberry is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with Pilberry; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

# Python packages|modules imports
import time
import os.path

# Pilberry packages|modules imports
from lib.hardware_drivers.rotary_encoder import RotaryEncoder
from lib.carrier.Carrier import Carrier
from lib.globals import VOLUME_LOCK_FILE
#from lib.utils import get_cmus_volume
#import lib.globals as globals

# Define GPIO inputs
PIN_A = 14  # Pin 8
PIN_B = 15  # Pin 10
BUTTON = 4  # Pin 7

ROTARY_CMD = {RotaryEncoder.CLOCKWISE: 'CMD_G',
              RotaryEncoder.ANTICLOCKWISE: 'CMD_H',
              RotaryEncoder.BUTTONDOWN: 'CMD_F1',
              RotaryEncoder.BUTTONUP: 'CMD_F1'}

with Carrier() as C:
    # This is the event callback routine to handle events
    def callback(event):
        C.send('VOLUME_TO_CORE', ROTARY_CMD[event])

        if not os.path.isfile(VOLUME_LOCK_FILE):
            C.send('VOLUME_TO_DISPLAY', None)
            #globals.volume_watcher = True

    rswitch = RotaryEncoder(PIN_A,PIN_B,BUTTON,callback)

    while True:
        time.sleep(0.1)




