#!/usr/bin/env python3
#
# Raspberry Pi Rotary Test Encoder Class
# $Id: test_rotary_class.py,v 1.2 2014/03/25 19:42:00 bob Exp $
#
# Author : Bob Rathbone
# Site   : http://www.bobrathbone.com
#
# This class uses standard rotary encoder with push switch
#
# License: GNU V3, See https://www.gnu.org/copyleft/gpl.html
#
# Disclaimer: Software is provided as is and absolutly no warranties are implied or given.
#             The authors shall not be liable for any loss or damage however caused.
#

import sys
import subprocess
import time
from lib.hardware_drivers.rotary_encoder import RotaryEncoder

from lib.globals import SOCKETS_CONFIG

# Define GPIO inputs
PIN_A = 14  # Pin 8
PIN_B = 15  # Pin 10
BUTTON = 4  # Pin 7


# This is the event callback routine to handle events
def callback(event):
    if event == RotaryEncoder.CLOCKWISE:
        subprocess.Popen(['cmus-remote',
                          '--server',
                          SOCKETS_CONFIG['TO_CMUS']['FILE'],
                          '-C',
                          'vol +1%'])
    elif event == RotaryEncoder.ANTICLOCKWISE:
        subprocess.Popen(['cmus-remote',
                          '--server',
                          SOCKETS_CONFIG['TO_CMUS']['FILE'],
                          '-C',
                          'vol -1%'])
    elif event == RotaryEncoder.BUTTONDOWN:
        pass
    elif event == RotaryEncoder.BUTTONUP:
        pass
    return

rswitch = RotaryEncoder(PIN_A,PIN_B,BUTTON,callback)
#volumeknob = RotaryEncoder(LEFT_SWITCH,RIGHT_SWITCH,MUTE_SWITCH,callback)
#tunerknob = RotaryEncoder(UP_SWITCH,DOWN_SWITCH,MENU_SWITCH,callback)


while True:
    time.sleep(0.5)



