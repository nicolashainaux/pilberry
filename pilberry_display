#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Pilberry runs a car radio based on Raspberry Pi
# Copyright 2014 Olivier Cecillon <ocecillon@users.sourceforge.net>
# and Nicolas Hainaux <nico_h@users.sourceforge.net>

# This file is part of Pilberry.

# Pilberry is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# any later version.

# Pilberry is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with Pilberry; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

# Simple server script that waits for command, to test browsing a file system

# Python packages|modules imports
import time
import pickle
import socket
import sys, os
import RPIO
import subprocess
import logging
import logging.config

# Adafruit packages|modules imports
from lib.hardware_drivers.Adafruit_CharLCDPlate import Adafruit_CharLCDPlate

# Pilberry packages|modules imports
import lib.globals as globals
from lib.view import View
from lib.globals import SOCKETS_CONFIG, LOG_DIR
from lib.globals import VOLUME_LOCK_FILE
#from lib.tree.Node import Node
#from lib.tree.NodeFileSystem import NodeFileSystem
from lib.utils import current_milli_time
from lib.utils import get_cmus_volume

lcd = Adafruit_CharLCDPlate()

logging.config.fileConfig(LOG_DIR + 'logging.conf')

displayLog = logging.getLogger('displayLog')

# Get the sockets' ports from sockets' conf file
CORE_TCP_PORT = int(SOCKETS_CONFIG['CORE_TO_DISPLAY']['PORT'])
CORE_DATA_TCP_PORT = int(SOCKETS_CONFIG['CORE_DATA_TO_DISPLAY']['PORT'])
CORE_STATE_TCP_PORT = int(SOCKETS_CONFIG['CORE_STATE_TO_DISPLAY']['PORT'])
CORE_MODE_COLOR_TCP_PORT = int(SOCKETS_CONFIG['CORE_MODE_COLOR_TO_DISPLAY']['PORT'])
VOLUME_TCP_PORT = int(SOCKETS_CONFIG['VOLUME_TO_DISPLAY']['PORT'])

displayLog.debug("Waiting for the first info to come...")

v = View.View()

def core_callback(socket, data):
    try:
        info = pickle.loads(data)
    except:
        print("Exception catched")
    else:
        if info == 'QUIT':
            displayLog.debug("Exit")
            sys.exit()

        else:
            v.store_core_state(info)
            v.handle(info)

def core_data_callback(socket, data):
    try:
        info = pickle.loads(data)
    except:
        print("Exception catched")
    else:
        v.set_infos_memory({'xnode_name': info['xnode_name'],
                            'xnode_parent': info['xnode_parent']})
        #v.set_infos_head({'head_name': info['head_name'],
        #                  'head_parent': info['head_parent']})
    v.handle('UPDATE')


def core_state_callback(socket, data):
    # Received data is in a dictionary like: {'timeout' : 1, 'msg' : "Message"}
    info = pickle.loads(data)

    if 'timeout' in info and type(info['timeout']) == int \
        and 'msg' in info and type(info['msg']) == str:
    #___
        v.set_short_message(info['msg'])

        v.handle('UPDATE')

        time.sleep(info['timeout'])

        v.reset_short_message()

        v.handle('UPDATE')

    else:
        v.set_short_message(info['msg'])

        if 'last_chars' in info \
            and type(info['last_chars']) == int:
        #___
            v.handle('UPDATE', last_chars=info['last_chars'])
        else:
            v.handle('UPDATE')


def volume_callback(socket, data):
    #info = pickle.loads(data)
    open(VOLUME_LOCK_FILE, 'w').close()

    keep_watching = True

    new_vol = get_cmus_volume()

    v.set_volume_info("      Volume " + new_vol)

    v.handle('UPDATE')

    last_check = current_milli_time()

    while keep_watching:
        time.sleep(0.1)
        old_vol = new_vol
        new_vol = get_cmus_volume()

        if new_vol != old_vol:
            last_check = current_milli_time()
            v.set_volume_info("      Volume " + new_vol)
            v.handle('UPDATE', last_chars=3)
        else:
            if current_milli_time() - last_check > 1000:
                keep_watching = False

    v.reset_volume_info()
    v.handle('UPDATE')
    v.lcd_set_indicator()

    print("end of watching volume")

    os.remove(VOLUME_LOCK_FILE)





def core_mode_color_callback(socket, data):
    info = pickle.loads(data)
    if info == "on":
        # Weird behaviour of the colors here. Had to use lcd.VIOLET to see
        # a new color... which is absolutely not violet...
        lcd.backlight(lcd.VIOLET)
    else:
        lcd.backlight(lcd.WHITE)


RPIO.add_tcp_callback(CORE_TCP_PORT, core_callback)
RPIO.add_tcp_callback(CORE_DATA_TCP_PORT, core_data_callback)
RPIO.add_tcp_callback(CORE_STATE_TCP_PORT, core_state_callback)
RPIO.add_tcp_callback(CORE_MODE_COLOR_TCP_PORT, core_mode_color_callback)
RPIO.add_tcp_callback(VOLUME_TCP_PORT, volume_callback)

# Blocking main epoll loop
RPIO.wait_for_interrupts()
