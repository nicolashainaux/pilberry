#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Pilberry runs a car radio based on Raspberry Pi
# Copyright 2014 Olivier Cecillon <ocecillon@users.sourceforge.net>
# and Nicolas Hainaux <nico_h@users.sourceforge.net>

# This file is part of Pilberry.

# Pilberry is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# any later version.

# Pilberry is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with Pilberry; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

# Python packages|modules imports
import sys
import pickle
import RPIO

# Pilberry packages|modules imports
from lib.globals import modes_list, cmd_match_list, current_mode, MODES_PORT
from lib.states.memory.StateMemory_A import State_A as MState_A
from lib.states.memory.StateMemory_B import State_B as MState_B
from lib.states.memory.StateMemory_C import State_C as MState_C
from lib.states.memory.StateMemory_D import State_D as MState_D
from lib.states.memory.StateMemory_E import State_E as MState_E

##
#   @todo   At startup, get the last data...
current_state = MState_A()

def socket_callback(socket, data):
    raw_cmd = pickle.loads(data)
    if raw_cmd == 'QUIT':
        print("Shutting down server")
        sys.exit()
    else:
        cmd = cmd_match_list[raw_cmd]
        print(cmd)
        if cmd == 'CMD_CHMOD':
            ##
            #   @todo   Implement changing mode
            print("Now we change the mode")
        elif cmd == 'QUIT':
            sys.exit()
        else:
            current_state.handle(cmd)

# TCP socket server callback on port 8080
RPIO.add_tcp_callback(MODES_PORT, socket_callback)

print("Waiting for TCP interrupts...\n")

# Blocking main epoll loop
RPIO.wait_for_interrupts()
