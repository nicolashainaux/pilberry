#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Pilberry runs a car radio based on Raspberry Pi
# Copyright 2014 Olivier Cecillon <ocecillon@users.sourceforge.net>
# and Nicolas Hainaux <nico_h@users.sourceforge.net>

# This file is part of Pilberry.

# Pilberry is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# any later version.

# Pilberry is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with Pilberry; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

# Pilberry's core script

# Python packages|modules imports
import time
import pickle
import socket
import sys, os
import RPIO
import logging
import logging.config

# Pilberry packages|modules imports
from lib.globals import SOCKETS_CONFIG, MODES_CONFIG, LOG_DIR
from lib.globals import cmd_match_list, modes_list
from lib.mode.Mode import Mode
import lib.globals as globals

logging.config.fileConfig(LOG_DIR + 'logging.conf')

console = logging.getLogger('console')

# Get the sockets' ports from sockets' conf file
KEYPAD_PORT = int(SOCKETS_CONFIG['KEYPAD_TO_CORE']['PORT'])
AUDIO_FEEDBACK_PORT = int(SOCKETS_CONFIG['AUDIO_FEEDBACK_TO_CORE']['PORT'])

tree_root = MODES_CONFIG[modes_list[0]]['ROOT_PATH']

if not os.path.isdir(tree_root):
    ##
    #   @todo   Tell something to LCD if the given root is not valid.
    print(tree_root + " is not a valid directory. Exiting")
    sys.exit()

globals.current_mode = Mode(root=tree_root)
m = globals.current_mode

def report():
    console.debug("xnode is in: " + m.xnode.parent['full_path'])
    console.debug("xnode is " \
          + m.xnode['file_name']\
          + " and has " \
          + str(len(m.xnode.children)) \
          + " children.")
    console.debug("head is \033[32m" \
          + m.head['file_name']\
          + "\033[0m and has " \
          + str(len(m.head.children)) \
          + " children.")
    console.debug("global.cmus_status: "+ str(globals.cmus_status))

    result = ""
    for i in range(len(m.xnode.neighbours)):
        open_bracket = "["
        close_bracket = "]"
        if m.xnode.neighbours[i]['file_name'] == m.xnode['file_name']:
            open_bracket = "\033[33m<<"
            close_bracket = ">>\033[0m"

        result += open_bracket \
               + m.xnode.neighbours[i]['file_name'] \
               + close_bracket \
               + " "

    result += "\nWaiting for next command..."

    console.debug(result)


report()

def keypad_callback(socket, data):
    raw_cmd = pickle.loads(data)
    if raw_cmd == 'QUIT':
        console.debug("Shutting down server")
        sys.exit()
    else:
        try:
            cmd = cmd_match_list[raw_cmd]
        except KeyError:
            console.debug("Received: \033[92m" + raw_cmd \
                            + ". Unknown command, no action\033[0m")

        else:
            console.debug("Received: \033[92m" + cmd + "\033[0m")
            m.handle(cmd)

            report()


def audio_feedback_callback(socket, data):
    notification = pickle.loads(data)
    if notification['status'] in globals.CMUS_NOTIFICATIONS:
        console.debug("Received status notification: \033[31m" \
                + notification['status']
                + '\033[0m')
        globals.cmus_status = notification['status']

        m.handle(notification['status'], full_path=notification['full_path'])

    else:
        console.debug("Received UNKNOWN status notification: " \
                      + notification['status'])

    console.debug("On full path: " + notification['full_path'])

    report()


RPIO.add_tcp_callback(KEYPAD_PORT, keypad_callback)
RPIO.add_tcp_callback(AUDIO_FEEDBACK_PORT, audio_feedback_callback)

# Blocking main epoll loop
RPIO.wait_for_interrupts()

