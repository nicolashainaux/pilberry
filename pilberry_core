#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Pilberry runs a car radio based on Raspberry Pi
# Copyright 2014 Olivier Cecillon <ocecillon@users.sourceforge.net>
# and Nicolas Hainaux <nico_h@users.sourceforge.net>

# This file is part of Pilberry.

# Pilberry is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# any later version.

# Pilberry is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with Pilberry; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

# Pilberry's core script

# Adafruit packages|modules imports
from lib.hardware_drivers.Adafruit_CharLCDPlate import Adafruit_CharLCDPlate

lcd = Adafruit_CharLCDPlate()
lcd.clear()
lcd.message("Initializing...")

# Python packages|modules imports
import time
import pickle
import socket
import sys, os
import subprocess
import RPIO
import logging
import logging.config


# Pilberry packages|modules imports
from lib.globals import SOCKETS_CONFIG, MODES_CONFIG
from lib.globals import LOG_DIR
from lib.globals import cmd_match_list, modes_list
from lib.mode.Mode import Mode
import lib.globals as globals
from lib.carrier.Carrier import Carrier

logging.config.fileConfig(LOG_DIR + 'logging.conf')

coreLog = logging.getLogger('coreLog')


# Get the sockets' ports from sockets' conf file
KEYPAD_PORT = int(SOCKETS_CONFIG['KEYPAD_TO_CORE']['PORT'])
AUDIO_FEEDBACK_PORT = int(SOCKETS_CONFIG['AUDIO_FEEDBACK_TO_CORE']['PORT'])
VOLUME_PORT = int(SOCKETS_CONFIG['VOLUME_TO_CORE']['PORT'])


tree_root = MODES_CONFIG[modes_list[0]]['ROOT_PATH']

if not os.path.isdir(tree_root):
    ##
    #   @todo   Tell something to LCD if the given root is not valid.
    #           Maybe also let raspbian (so the carradio) shutdown, after a
    #           certain time?
    print(tree_root + " is not a valid directory. Exiting")
    sys.exit()


lcd.clear()
lcd.message("Reading\nfilesystem...")
globals.current_mode = Mode(root=tree_root)
m = globals.current_mode

def report():
    coreLog.debug("xnode is in: " + m.xnode.parent['full_path'])
    coreLog.debug("xnode is " \
          + m.xnode['file_name']\
          + " and has " \
          + str(len(m.xnode.children)) \
          + " children.")
    coreLog.debug("head is \033[32m" \
          + m.head['file_name']\
          + "\033[0m and has " \
          + str(len(m.head.children)) \
          + " children.")
    coreLog.debug("global.cmus_status: "+ str(globals.cmus_status))

    result = ""
    for i in range(len(m.xnode.neighbours)):
        open_bracket = "["
        close_bracket = "]"
        if m.xnode.neighbours[i]['file_name'] == m.xnode['file_name']:
            open_bracket = "\033[33m<<"
            close_bracket = ">>\033[0m"

        result += open_bracket \
               + m.xnode.neighbours[i]['file_name'] \
               + close_bracket \
               + " "

    result += "\nWaiting for next command..."

    coreLog.debug(result)


report()

with Carrier() as C:

    # Let's initialize the display

    ##
    #   @todo   It's unfortunately not possible to send a Node entirely,
    #           probably because of buffer size problems (the retrieving
    #           process ends up with an EOF error).
    #           So, fix that problem, manage to send Nodes directly, like:
    #           data = {'xnode' : m.xnode,
    #                   'head' : m.head}
    #           it would be way more practical. And reliable. For instance,
    #           this would allow to compare Nodes directly instead of scattered
    #           parts of them. See lib/view/default/View_head.update(), for
    #           instance.
    data = {'xnode_name' : m.xnode['file_name'],
            'xnode_parent' : m.xnode.parent['file_name']}
    C.send('CORE_DATA_TO_DISPLAY', data)


    def keypad_callback(socket, data):
        raw_cmd = pickle.loads(data)
        if raw_cmd == 'QUIT':
            pass
            #C.send('CORE_TO_DISPLAY', 'QUIT')
            #AF_FILE_READ = open(VOLUME_PID_FILE, mode = 'r')
            #vol_pid = int(AF_FILE_READ.readlines()[0])
            #subprocess.Popen(['kill', str(vol_pid)])
            #coreLog.debug("Exit")
            #sys.exit()
        else:
            try:
                cmd = cmd_match_list[raw_cmd]
            except KeyError:
                coreLog.debug("Received: \033[92m" + raw_cmd \
                                + ". Unknown command, no action\033[0m")

            else:
                coreLog.debug("Received: \033[92m" + cmd + "\033[0m")
                m.handle(cmd)

                report()

                data = {'xnode_name' : m.xnode['file_name'],
                        'xnode_parent' : m.xnode.parent['file_name']}

                C.send('CORE_DATA_TO_DISPLAY', data)
                C.send('CORE_TO_DISPLAY', m.state)


    def audio_feedback_callback(socket, data):
        # Getting the status notification
        if data[:6].decode('UTF-8') == 'status':
            new_status = data[7:].decode('UTF-8')
            #coreLog.debug("Received: " + new_status)
            if new_status == "STOPPED":
                coreLog.debug("Received STOPPED")
                new_status = 'stopped'
                m.handle(new_status)
                C.send('CORE_TO_DISPLAY', m.state)

            globals.cmus_status = new_status
            coreLog.debug("Registring new status: " + str(globals.cmus_status))
        # Getting the file notification
        if data[:4].decode('UTF-8') == 'file':
            globals.cmus_file = data[5:].decode('UTF-8')
            coreLog.debug("Registring new file: " + str(globals.cmus_file))
            if globals.cmus_status != 'stopped':
                m.handle(globals.cmus_status, full_path=globals.cmus_file)

            coreLog.debug("data: xnode_name=" + str(m.xnode['file_name']) + \
                          "      xnode_parent=" + str(m.xnode.parent['file_name']) + \
                          "      head_name=" + str(m.head['file_name']) + \
                          "      head_parent=" + str(m.head.parent['file_name'])
                          )

            data = {'xnode_name' : m.xnode['file_name'],
                    'xnode_parent' : m.xnode.parent['file_name']}

            C.send('CORE_DATA_TO_DISPLAY', data)
            C.send('CORE_TO_DISPLAY', m.state)


    RPIO.add_tcp_callback(KEYPAD_PORT, keypad_callback)
    RPIO.add_tcp_callback(AUDIO_FEEDBACK_PORT, audio_feedback_callback)
    RPIO.add_tcp_callback(VOLUME_PORT, keypad_callback)

    # Blocking main epoll loop
    RPIO.wait_for_interrupts()

