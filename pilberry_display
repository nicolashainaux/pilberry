#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Pilberry runs a car radio based on Raspberry Pi
# Copyright 2014 Olivier Cecillon <ocecillon@users.sourceforge.net>
# and Nicolas Hainaux <nico_h@users.sourceforge.net>

# This file is part of Pilberry.

# Pilberry is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# any later version.

# Pilberry is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with Pilberry; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

# Simple server script that waits for command, to test browsing a file system

# Python packages|modules imports
import time
import pickle
import socket
import sys, os
import RPIO
import logging
import logging.config

# Adafruit packages|modules imports
from lib.hardware_drivers.Adafruit_CharLCDPlate import Adafruit_CharLCDPlate

# Pilberry packages|modules imports
import lib.globals as globals
from lib.view import View
from lib.globals import SOCKETS_CONFIG, LOG_DIR
#from lib.tree.Node import Node
#from lib.tree.NodeFileSystem import NodeFileSystem

lcd = Adafruit_CharLCDPlate()

logging.config.fileConfig(LOG_DIR + 'logging.conf')

displayLog = logging.getLogger('displayLog')

# Get the sockets' ports from sockets' conf file
CORE_TCP_PORT = int(SOCKETS_CONFIG['CORE_TO_DISPLAY']['PORT'])
CORE_DATA_TCP_PORT = int(SOCKETS_CONFIG['CORE_DATA_TO_DISPLAY']['PORT'])
CORE_STATE_TCP_PORT = int(SOCKETS_CONFIG['CORE_STATE_TO_DISPLAY']['PORT'])
CORE_MODE_COLOR_TCP_PORT = int(SOCKETS_CONFIG['CORE_MODE_COLOR_TO_DISPLAY']['PORT'])

displayLog.debug("Waiting for the first info to come...")

v = View.View()

def core_callback(socket, data):
    info = pickle.loads(data)
    if info == 'QUIT':
        displayLog.debug("Exit")
        sys.exit()

    else:
        v.handle(info)

def core_data_callback(socket, data):
    info = pickle.loads(data)
    v.set_infos_memory({'xnode_name': info['xnode_name'],
                        'xnode_parent': info['xnode_parent']})
    #v.set_infos_head({'head_name': info['head_name'],
    #                  'head_parent': info['head_parent']})
    v.handle('UPDATE')


def core_state_callback(socket, data):
    # Received data is in a dictionary like: {'timeout' : 1, 'msg' : "Message"}
    info = pickle.loads(data)

    if 'timeout' in info and type(info['timeout']) == int:
        v.set_infos_memory({'xnode_name': info['msg'],
                            'xnode_parent': v.infos['xnode_parent']})
        v.handle('UPDATE')
        time.sleep(info['timeout'])
        v.set_infos_memory({'xnode_name': v.infos_past['xnode_name'],
                            'xnode_parent': v.infos['xnode_parent']})
        v.handle('UPDATE')

    else:
        v.set_infos_memory({'xnode_name': info['msg'],
                            'xnode_parent': v.infos['xnode_parent']})
        if 'last_chars' in info \
            and type(info['last_chars']) == int:
        #___
            v.handle('UPDATE', last_chars=info['last_chars'])
        else:
            v.handle('UPDATE')


def core_mode_color_callback(socket, data):
    info = pickle.loads(data)
    if info == "on":
        # Weird behaviour of the colors here. Had to use lcd.VIOLET to see
        # a new color... which is absolutely not violet...
        lcd.backlight(lcd.VIOLET)
    else:
        lcd.backlight(lcd.WHITE)


RPIO.add_tcp_callback(CORE_TCP_PORT, core_callback)
RPIO.add_tcp_callback(CORE_DATA_TCP_PORT, core_data_callback)
RPIO.add_tcp_callback(CORE_STATE_TCP_PORT, core_state_callback)
RPIO.add_tcp_callback(CORE_MODE_COLOR_TCP_PORT, core_mode_color_callback)

# Blocking main epoll loop
RPIO.wait_for_interrupts()
