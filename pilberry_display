#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Pilberry runs a car radio based on Raspberry Pi
# Copyright 2014 Olivier Cecillon <ocecillon@users.sourceforge.net>
# and Nicolas Hainaux <nico_h@users.sourceforge.net>

# This file is part of Pilberry.

# Pilberry is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# any later version.

# Pilberry is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with Pilberry; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

# Simple server script that waits for command, to test browsing a file system

# Python packages|modules imports
import time
import pickle
import socket
import sys, os
import RPIO
import logging
import logging.config

# Adafruit packages|modules imports
from lib.hardware_drivers.Adafruit_CharLCDPlate import Adafruit_CharLCDPlate

# Pilberry packages|modules imports
import lib.globals as globals
from lib.globals import SOCKETS_CONFIG, LOG_DIR
from lib.tree.Node import Node
from lib.tree.NodeFileSystem import NodeFileSystem

lcd = Adafruit_CharLCDPlate()

logging.config.fileConfig(LOG_DIR + 'logging.conf')

displayLog = logging.getLogger('displayLog')

# Get the socket file name from sockets' conf file
CORE_TCP_PORT = int(SOCKETS_CONFIG['CORE_TO_DISPLAY']['PORT'])

displayLog.debug("Waiting for the first info to come...")

def core_callback(socket, data):
    info = pickle.loads(data)
    if info == 'QUIT':
        displayLog.debug("Exit")
        sys.exit()
    displayLog.debug("line1: " + info['parent'][0:16])
    displayLog.debug("line2: " + info['xnode_name'][0:16])
    displayLog.debug("status: " + info['status'])
    lcd.clear()
    lcd.message(info['parent'][0:16] + "\n")
    lcd.message(info['xnode_name'][0:16])
    #line1 = globals.current_mode.xnode.parent.full_path
    #line2 = globals.current_mode.xnode.full_path
    #console.debug(line1 + "\n" + line2 + "\n\n")




RPIO.add_tcp_callback(CORE_TCP_PORT, core_callback)

# Blocking main epoll loop
RPIO.wait_for_interrupts()
