#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Pilberry runs a car radio based on Raspberry Pi
# Copyright 2014 Olivier Cecillon <ocecillon@users.sourceforge.net>
# and Nicolas Hainaux <nico_h@users.sourceforge.net>

# This file is part of Pilberry.

# Pilberry is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# any later version.

# Pilberry is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with Pilberry; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

# Main script that will start all other pilberry components

# Python packages|modules imports
import subprocess
import time

# Pilberry packages|modules imports
import lib.globals as globals
from lib.globals import SOCKETS_CONFIG
from lib.globals import AUDIO_FEEDBACK_SCRIPT, CORE_SCRIPT, DISPLAY_SCRIPT
from lib.globals import VOLUME_SCRIPT

def __main__():
    subprocess.Popen(['cmus',
                      '--listen',
                      SOCKETS_CONFIG['TO_CMUS']['FILE']])


    ds = subprocess.Popen([DISPLAY_SCRIPT])
    time.sleep(1)

    cs = subprocess.Popen([CORE_SCRIPT])

    ##
    #   @todo   Check if the timing below is enough/not too much

    # To ensure cmus is completely open before any cmus-remote command is sent:
    time.sleep(1)

    vs = subprocess.Popen([VOLUME_SCRIPT])

    subprocess.Popen(['echo "' + str(ds.pid) + '" > ./var/run/ds.pid'],
                      shell=True)
    subprocess.Popen(['echo "' + str(cs.pid) + '" > ./var/run/cs.pid'],
                      shell=True)
    subprocess.Popen(['echo "' + str(vs.pid) + '" > ./var/run/vs.pid'],
                      shell=True)

    subprocess.Popen(['cmus-remote',
                      '--server',
                      SOCKETS_CONFIG['TO_CMUS']['FILE'],
                      '-C',
                      'set status_display_program=' + AUDIO_FEEDBACK_SCRIPT])




if __name__ == '__main__':
    __main__()
