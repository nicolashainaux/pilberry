#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Pilberry runs a car radio based on Raspberry Pi
# Copyright 2014 Olivier Cecillon <ocecillon@users.sourceforge.net>
# and Nicolas Hainaux <nico_h@users.sourceforge.net>

# This file is part of Pilberry.

# Pilberry is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# any later version.

# Pilberry is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with Pilberry; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

# Simple server script that waits for command, to test browsing a file system

# Python packages|modules imports
import time
import pickle
import configparser
#import socket
import sys, os
import argparse
import RPIO
import logging

# Pilberry packages|modules imports
from lib.globals import SOCKETS_CONFIG, cmd_match_list
from lib.tree.Tree import Tree
from lib.musicdriver.MusicDriver import MusicDriver
import lib.globals as globals

logging.basicConfig(filename='../log/mbp.log',
                    filemode='w',
                    level=logging.DEBUG,
                    format='%(asctime)s %(filename)s: %(funcName)s: %(message)s',
                    datefmt='%Y/%m/%d %H:%M:%S')

# Get the socket file name from sockets' conf file
SOCKETS_PORTS = [int(SOCKETS_CONFIG['TEST_MBP']['PORT']),
                 int(SOCKETS_CONFIG['TEST_MBP2']['PORT'])
                 ]

parser = argparse.ArgumentParser(description='Script to test driving a tree')
parser.add_argument('root', metavar='ROOT_PATH', type=str, nargs='+',
                   help='the "adress" of the destination process')

tree_root = vars(parser.parse_args())['root'][0]

if not os.path.isdir(tree_root):
    print(tree_root + " is not a valid directory. Exiting")
    sys.exit()

globals.current_tree = Tree(root=tree_root)
md = MusicDriver()


#print("Using socket file: " + SOCKET_FILE)
#server = socket.socket(socket.AF_UNIX, socket.SOCK_DGRAM)
#server.bind(SOCKET_FILE)

print("Parent node is: " \
      + globals.current_tree.current_node.parent['full_path'])
print("Current node is " \
      + globals.current_tree.current_node['file_name']\
      + " and has " \
      + str(len(globals.current_tree.current_node.children)) \
      + " children.")
result = ""
for i in range(len(globals.current_tree.current_neighbours)):
    open_bracket = "["
    close_bracket = "]"
    if i == globals.current_tree.current_node.position:
        open_bracket = "<<"
        close_bracket = ">>"

    result += open_bracket \
           + globals.current_tree.current_neighbours[i]['file_name'] \
           + close_bracket \
           + " "

print(result)


def socket_callback(socket, data):
    raw_cmd = pickle.loads(data)
    if raw_cmd == 'QUIT':
        print("Shutting down server")
        sys.exit()
    else:
        try:
            cmd = cmd_match_list[raw_cmd]
        except KeyError:
            print("Received: " + raw_cmd + ". Unknown command, no action")

        else:
            print("Received: " + cmd)
            if cmd == "CMD_SELECT":
                globals.current_tree.move_to_1st_child()
                #md.stop()
                md.start_playing()

            elif cmd == "CMD_MOVE_TO_PREV_NODE":
                #md.stop()
                globals.current_tree.move_to_prev_node()

            elif cmd == "CMD_MOVE_TO_NEXT_NODE":
                #md.stop()
                globals.current_tree.move_to_next_node()

            elif cmd == "CMD_MOVE_TO_PARENT":
                #md.stop()
                globals.current_tree.move_to_parent()

            elif cmd == "CMD_MOVE_TO_1ST_CHILD":
                globals.current_tree.move_to_1st_child()

            elif cmd == "CMD_ESC":
                md.toggle_pause()

            else:
                print("This command has no action on browsing the tree")

    print("Parent node is now: " \
          + globals.current_tree.current_node.parent['full_path'])
    print("Current node is now: " \
          + globals.current_tree.current_node['file_name']\
          + " and has " \
          + str(len(globals.current_tree.current_node.children)) \
          + " children.")
    result = ""
    for i in range(len(globals.current_tree.current_neighbours)):
        open_bracket = "["
        close_bracket = "]"
        if i == globals.current_tree.current_node.position:
            open_bracket = "<<"
            close_bracket = ">>"

        result += open_bracket \
               + globals.current_tree.current_neighbours[i]['file_name'] \
               + close_bracket \
               + " "

    print(result)
    print("Waiting for next command...\n")


def socket_callback2(socket, data):
    notification = pickle.loads(data)
    if notification['status'] in globals.CMUS_NOTIFICATIONS:
        print("Received status notification: " + notification['status'])
        globals.cmus_status = notification['status']

    else:
        print("Received UNKNOWN status notification: " + notification['status'])

    print("On full path: " + notification['full_path'])


RPIO.add_tcp_callback(SOCKETS_PORTS[0], socket_callback)
RPIO.add_tcp_callback(SOCKETS_PORTS[1], socket_callback2)

print("Waiting for TCP interrupts...\n")

# Blocking main epoll loop
RPIO.wait_for_interrupts()
