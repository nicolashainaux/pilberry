#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Pilberry runs a car radio based on Raspberry Pi
# Copyright 2014 Olivier Cecillon <ocecillon@users.sourceforge.net>
# and Nicolas Hainaux <nico_h@users.sourceforge.net>

# This file is part of Pilberry.

# Pilberry is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# any later version.

# Pilberry is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with Pilberry; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

# Script that will start all other pilberry components

# Python packages|modules imports
import subprocess
import time
import re
import os

# Pilberry packages|modules imports
import lib.globals as globals
from lib.globals import SOCKETS_CONFIG
from lib.globals import PILBERRY_ROOT
from lib.globals import AUDIO_FEEDBACK_SCRIPT
from lib.globals import CORE_SCRIPT, DISPLAY_SCRIPT, VOLUME_SCRIPT
from lib.globals import PID_FILE

##
#   @todo   Provide a more evolutive script, this is just the minimal version.
#           It should take the dirs and files names a cleaner way. Remove
#           the dirty hack
def __main__():
    # ? is that also a dirty hack?
    os.environ['HOME'] = '/root/'
    os.environ['USER'] = 'root'
    cmus = subprocess.Popen(['cmus',
                             '--listen',
                             SOCKETS_CONFIG['TO_CMUS']['FILE']])

    # dirty hack
    pilberry_root = re.sub("/bin", "", PILBERRY_ROOT)
    display_script = re.sub("/bin", "", DISPLAY_SCRIPT)
    volume_script = re.sub("/bin", "", VOLUME_SCRIPT)
    core_script = re.sub("/bin", "", CORE_SCRIPT)
    pid_file = re.sub("/bin", "", PID_FILE)
    audio_feedback_script = re.sub("/bin", "", AUDIO_FEEDBACK_SCRIPT, count=1)


    ds = subprocess.Popen([display_script], cwd=pilberry_root)
    time.sleep(1)

    cs = subprocess.Popen([core_script], cwd=pilberry_root)

    ##
    #   @todo   Check if the timing below is enough/not too much

    # To ensure cmus is completely open before any cmus-remote command is sent:
    time.sleep(1)

    vs = subprocess.Popen([volume_script], cwd=pilberry_root)

    subprocess.Popen(['echo "' + str(ds.pid) + '" > ' + pid_file],
                      shell=True)
    subprocess.Popen(['echo "' + str(cs.pid) + '" >> ' + pid_file],
                      shell=True)
    subprocess.Popen(['echo "' + str(vs.pid) + '" >> ' + pid_file],
                      shell=True)

    subprocess.Popen(['echo "' + str(cmus.pid) + '" >> ' + pid_file],
                      shell=True)

    subprocess.Popen(['cmus-remote',
                      '--server',
                      SOCKETS_CONFIG['TO_CMUS']['FILE'],
                      '-C',
                      'set status_display_program=' + audio_feedback_script])




if __name__ == '__main__':
    __main__()
